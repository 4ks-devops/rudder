#!/usr/bin/python3
import sys
import json
import os
import codecs
sys.path.append('/opt/rudder/share/python/')
from operator import itemgetter
import methods_generator

try:
    from configparser import ConfigParser
except ImportError:
    from ConfigParser import SafeConfigParser as ConfigParser


def get_methods_filenames(parent_dir):
    filenames = []
    for root, dirs, files in os.walk(parent_dir):
        for current_dir in dirs:
            filenames = filenames + get_methods_filenames(
                os.path.join(parent_dir, current_dir)
            )

        for file in files:
            if (
                file.endswith('.cf') or file.endswith('.ps1')
            ) and not file.startswith('_'):
                filenames.append(os.path.join(root, file))
    return filenames

def read_config(filename):
    config = ConfigParser()
    config.read(filename)
    return config


def config_value(config, key, default):
    try:
        return config.get('shared', key).replace('"', '')
    except BaseException:
        return default


def translate_ncf_to_json(method_files, dsc_files, ncf_source):
    """
    Parse each method to a state, described in json
    a state json looks like this:

    {
      "class_parameter": "name",
      "class_parameter_id": 0,
      "class_prefix": "variable_string_escaped",
      "deprecated": "",
      "description": "",
      "documentation": "",
      "method": "variable_string_escaped",
      "name": "Variable string escaped",
      "parameters": [],
      "resource": "variable",
      "resource_parameters": [
        {
          "constraints": {},
          "description": "The prefix of the variable name",
          "name": "prefix",
          "type": "string"
        },
        {
          "constraints": {},
          "description": "The variable to define, the full name will be prefix.name",
          "name": "name",
          "type": "string"
        }
      ],
      "source_file": "repos/ncf/tree/30_generic_methods/variable_string_escaped.cf",
      "state": "string_escaped",
      "supported_agents": [
        "cf"
      ]
    }
    """

    # ncf.py location is only known after config parsing
    sys.path.append(ncf_source + '/tools')
    import ncf

    data = {}
    states = {}
    errors = []
    for method_path in method_files:
        with codecs.open(method_path, encoding='utf-8') as file_descriptor:
            method_raw_content = file_descriptor.read()
        try:
            method_metadata = ncf.parse_generic_method_metadata(
                method_raw_content
            )['result']
            # We need to pass the dsc_files to compute agent support
            method_state = methods_generator.State(
                method_metadata, method_path, dsc_files
            )
            if 'rename' not in method_metadata and 'drop' not in method_metadata:
                states[method_metadata['name']] = method_state.to_dict()
        except ncf.NcfError as exception:
            error = ncf.NcfError(
                "Could not parse method described in '" + method_path + "'",
                cause=str(exception),
            )
            errors.append(str(error))

    # Regroup states by resource
    # Produces a json like:
    # {
    #   "resource_name": {
    #      "parameters": [{ "name": "", "constraints": {}, "description": {}, "type": "" }],
    #      "states": {
    #          [
    #            { state object }
    #          ]
    #      }
    # }
    for state_data in states.values():
        resource_name = state_data['resource']
        try:
            if resource_name not in data:
                data[resource_name] = {
                    'parameters': state_data['resource_parameters'],
                    'states': [state_data],
                }
            else:
                # Verify that parameters are the same for the resource,
                # only the description can differ
                for param_index in range(
                    len(state_data['resource_parameters']) - 1
                ):
                    expected = state_data['resource_parameters'][param_index]
                    new = data[resource_name]['parameters'][param_index]
                    try:
                        # assert(expected.pop("description") == new.pop("description"))
                        assert expected['name'] == new['name']
                        assert expected['constraints'] == new['constraints']
                    except Exception:
                        raise ncf.NcfError(
                            "Incoherent resource parameters for resource '"
                            + resource_name
                            + "', expecting "
                            + expected
                            + ' got '
                            + new
                        )
                data[resource_name]['states'].append(state_data)
        except ncf.NcfError as exception:
            errors.append(str(exception))

    # Add aliases for deprecated methods
    deprecated_methods = methods_generator.get_deprecated_methods()
    for resource in data.values():
        for state in resource['states']:
            if state['method'] in deprecated_methods:
                state['method_aliases'] = deprecated_methods[state['method']]

    # Sort the dict
    for resource in data.values():
        resource['states'] = sorted(
            resource['states'], key=itemgetter('state')
        )

    complete_data = {'data': data, 'errors': errors, 'warnings': {}}
    return complete_data


def translate_lib(config_file):
    config = read_config(config_file)
    lib_dir = (
        config_value(config, 'stdlib', '/opt/rudder/share/language/lib/')
        + '/std/'
    )
    cfengine_methods = config_value(
        config, 'cfengine_methods', '/usr/share/ncf/tree/30_generic_methods/'
    )
    alt_cfengine_methods = config_value(
        config,
        'alt_cfengine_methods',
        '/var/rudder/configuration-repository/ncf/30_generic_methods',
    )
    dsc_methods = config_value(
        config,
        'dsc_methods',
        '/var/rudder/configuration-repository/dsc/ncf/30_generic_methods/',
    )
    ncf_source = config_value(
        config,
        'ncf_source',
        '/usr/share/ncf',
    )

    method_files = get_methods_filenames(
        cfengine_methods
    ) + get_methods_filenames(alt_cfengine_methods)
    dsc_files = get_methods_filenames(dsc_methods)

    data = translate_ncf_to_json(method_files, dsc_files, ncf_source)
    if data['errors']:
        print(json.dumps(data['errors'], indent=2, sort_keys=True))

    for resource_name in data['data']:
        methods_generator.generate_lib(
            resource_name, data['data'][resource_name], lib_dir
        )


if __name__ == '__main__':
    if len(sys.argv) == 1:
        translate_lib('/opt/rudder/etc/rudderc.conf')
    elif len(sys.argv) == 2:
        translate_lib(sys.argv[1])
    else:
        print(sys.argv[0] + ' [config_file]')
        sys.exit(1)

# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2020 Normation SAS

include ../rust.makefile

DOC_EXAMPLES := $(wildcard docs/examples/*.rd)

install: build
	mkdir -p $(DESTDIR)/opt/rudder/etc
	mkdir -p $(DESTDIR)/opt/rudder/bin
	mkdir -p $(DESTDIR)/opt/rudder/share/python
	mkdir -p $(DESTDIR)/opt/rudder/share/language/lib
	mkdir -p $(DESTDIR)/opt/rudder/share/language/tools
	mkdir -p $(DESTDIR)/var/log/rudder/language/

	# Install executable and helper scripts
	install -m 755 target/release/rudderc $(DESTDIR)/opt/rudder/bin/rudderc
	install -m 755 tools/tester.sh $(DESTDIR)/opt/rudder/share/language/tools/tester.sh
	install -m 755 tools/generated_formats_tester $(DESTDIR)/opt/rudder/share/language/tools/generated_formats_tester
	install -m 755 tools/generate_lib $(DESTDIR)/opt/rudder/share/language/tools/generate_lib

	# Copy configuration and library files
	# required for rudderc execution
	install -m 640 tools/rudderc-prod.conf $(DESTDIR)/opt/rudder/etc/rudderc.conf
	install -m 644 libs/corelib.rd $(DESTDIR)/opt/rudder/share/language/lib/corelib.rd
	install -m 644 libs/oslib.rd $(DESTDIR)/opt/rudder/share/language/lib/oslib.rd
	install -m 644 libs/cfengine_core.rd $(DESTDIR)/opt/rudder/share/language/lib/cfengine_core.rd
	# stdlib is generated by generate_lib along with every build so no need to manually cp it

	# Python libs
	cp -r tools/jsondiff $(DESTDIR)/opt/rudder/share/python/
	cp -r tools/methods_generator $(DESTDIR)/opt/rudder/share/python/
	chmod 755 $(DESTDIR)/opt/rudder/share/python/jsondiff
	chmod 644 $(DESTDIR)/opt/rudder/share/python/jsondiff/*
	chmod 755 $(DESTDIR)/opt/rudder/share/python/methods_generator
	chmod 644 $(DESTDIR)/opt/rudder/share/python/methods_generator/*
	chmod 644 $(DESTDIR)/opt/rudder/etc/rudderc.conf
	chmod 644 $(DESTDIR)/var/log/rudder/language

test-docs: $(DOC_EXAMPLES)

test: libs
	# fires rudderc unit / integration tests
	cargo test --locked
	# saves a language technique based on a json technique
	cargo run -- save -c tools/rudderc-dev.conf -i tests/techniques/simplest/technique.json
	# recreate a JSON technique based on the RL one
	cargo run -- technique read -c tools/rudderc-dev.conf -i simplest/technique.rd
	# fires a technique compilation into cfengine format
	cargo run -- compile -c tools/rudderc-dev.conf -i simplest/technique.rd -o simplest/technique.cf
	# Same, using a config file, and verbosity. Wrap it in JSON format output
	cargo run -- compile -c tools/rudderc-dev.conf -i tests/techniques/simplest/technique.rd -f cf -l debug -j
	# fires a technique compilation into dsc format
	cargo run -- compile -c tools/rudderc-dev.conf -i tests/techniques/simplest/technique.rd -f dsc
	# takes a json to create rd + cf + dsc techniques wrapped into JSON
	cargo run -- technique generate -c tools/rudderc-dev.conf -i tests/techniques/simplest/technique.json
	# fires a testing loop (--keep can be added)
	./tools/test_all_techniques.sh


$(DOC_EXAMPLES):
	cargo run -- compile -c tools/rudderc-dev.conf -i $@ -o $@ -f cf
	rm $@.cf

libs:
	mkdir -p repos
	[ -d repos/ncf ] || git clone git@github.com:Normation/ncf.git repos/ncf
	cd repos/ncf && git checkout branches/rudder/7.0 && git pull origin branches/rudder/7.0
	[ -d repos/dsc ] || git clone git@github.com:Normation/rudder-agent-windows.git repos/dsc \
	 || mkdir -p repos/dsc/plugin/ncf/30_generic_methods/ repos/dsc/packaging/Files/share/initial-policy/ncf/30_generic_methods/
	cd repos/dsc && git checkout branches/rudder/7.0 && git pull origin branches/rudder/7.0 || true
	tools/generate_lib tools/rudderc-dev.conf

libs-docs: libs
	mkdir -p target/docs/std
	# FIXME replace with proper option
	cargo run -- save -c tools/rudderc-dev.conf -i simplest/technique.json
	cargo run -- compile -c tools/rudderc-dev.conf -i simplest/technique.rd -f md
	echo "" > target/docs/std/lib.adoc
	for resource in $$(ls -1 target/docs/std/*.md); \
	  do pandoc -t asciidoc -f commonmark $${resource} >> target/docs/std/lib.adoc; \
	  echo "" >> target/docs/std/lib.adoc ;\
	done

docs: libs-docs
	mkdir -p target/docs
	cp -r docs/images target/docs/
	asciidoctor -a stylesheet=assets/css/rudder.css --doctype=book --destination-dir=target/docs docs/index.adoc
	asciidoctor -a stylesheet=assets/css/rudder.css --doctype=book --destination-dir=target/docs docs/contributing.adoc

check: lint test

clean:
	cargo clean
	rm -rf target
	rm -rf libs/std
	rm -rf tests/tmp

.PHONY: docs $(DOC_EXAMPLES) libs clean

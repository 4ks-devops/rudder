#!/usr/bin/python3

"""
Cf and Json / rudder-lang compatibility tester
Usage: 
    cfjson_tester compare-json [--config-file=<local_config_path.conf>] <first.json> <new.json>
    cfjson_tester compare-cf [--config-file=<local_config_path.conf>] <first.cf> <new.cf>
    cfjson_tester compare-dsc [--config-file=<local_config_path.conf>] <first.dsc> <new.dsc>
"""

import sys
import os
import configparser
import codecs
import json
from pprint import pprint
import re
from subprocess import check_output

# prints the output at json format. If no issue : nothing is printed. Else, print either json diff or python error
def print_json(function, filename, json_to_format, is_python_error=False):
  if is_python_error:
    formatted_json = { "function": function, "file": filename, "diff": json_to_format }
  else:
    formatted_json = { "function": function, "file": filename,  "error": json_to_format }
  print(json.dumps(formatted_json, indent=2) + ',')

# for now ignore all `class_context` parenthesis differences, priorities should be handled correctly from within the program
# depends (TE builtin condition type vs any.(manually written condition))
# eventually check condition equivalence
def filter_class_context(diff_values):
  # remove all parenthesis
  generated_filtered = ''.join(filter(lambda c: c not in ['(', ')'], diff_values[1]))
  original_filtered = ''.join(filter(lambda c: c not in ['(', ')'], diff_values[0]))
  return original_filtered == 'any.' + generated_filtered or original_filtered == generated_filtered


def compare_json(first, second):
  try:
    with open(first, "r") as f1:
      try:
        with open(second, "r") as f2:
          j1 = json.load(f1)
          j2 = json.load(f2)
      except IOError as e:
        print_json("compare_json", second, str(e), True)
        exit(1)
  except IOError as e:
    print_json("compare_json", first, str(e), True)
    exit(1)
  diff = jsondiff.diff(j1, j2, syntax="symmetric", marshal=True)
  deep_del(diff, ['data', '$insert'], 'resources', lambda d: len(d['resources']) == 0)
  deep_del(diff, ['data', 'method_calls'], 'class_context', lambda d: filter_class_context(d['class_context']))
  # for now generated lib has no method specific resource parameter so it will take default resource parameter
  deep_del(diff, ['data', 'method_calls', 'parameters'], 'name', lambda: True)
  empty_dict_cleaner(diff)
  # print if diff
  if len(diff) != 0:
    print_json("compare_json", second, diff)
    exit(1)


def load_cf(file_name):
  # Check file exists
  if not os.path.exists(file_name):
    file_name = "{}/{}".format(os.getcwd(), file_name)
    if not os.path.exists(file_name):
      print_json("compare_cf", file_name, 'No such file', True)
      exit(1)

  env = os.environ.copy()
  env['RES_OPTIONS'] = 'attempts:0'
  try:
    out = check_output([ncf.CFENGINE_PATH, "-pjson", "-f", file_name], env=env)
    promises = json.loads(out)
  except Exception as e:
    print_json("compare_cf", file_name, 'An error occurred while parsing cf technique: {}'.format(str(e)), True)
    exit(1)
  return promises

def compare_cf(first, second):
  j1 = load_cf(first)
  j2 = load_cf(second)
  diff = jsondiff.diff(j1, j2, syntax="symmetric", marshal=True)
  remove_wilful_entries(first, diff)
  empty_dict_cleaner(diff)
  if diff and len(diff) != 0:
    print_json("compare_cf", second, diff)
    exit(1)


def compare_dsc(first, second):
  # TODO diffs 2 DSC files
  return

# recursively deletes empty entries. Is considered empty an empty object or an object that only holds a 'line' key
def empty_dict_cleaner(diff_dict):
  istodel=False
  if type(diff_dict) is dict:
    for elem in diff_dict.copy():
      cur = diff_dict[elem]
      istodel |= empty_dict_cleaner(cur)
      if type(cur) is dict:
        if len(cur) == 0 or (type(cur) is dict and len(cur) == 1 and 'line' in cur.keys()):
          istodel = True
        else:
          istodel = False
        if istodel:
          diff_dict.pop(elem)
  elif type(diff_dict) is list:
    for elem in diff_dict.copy():
      istodel |= empty_dict_cleaner(elem)
  elif type(diff_dict) is tuple:
    for elem in diff_dict:
      istodel |= empty_dict_cleaner(elem)
  return istodel


# deletes from diff list every i/o difference done on purpose (ie that are not a bug)
def remove_wilful_entries(file_name, diff):
  # try:
    promises_path = ['bundles', 'promiseTypes', 'contexts', 'promises']
    # del name since `_technique` is always added
    deep_del(diff, ['bundles'], 'name', lambda d: len(d['name']) == 2 and d['name'][0] + '_technique' == d['name'][1])
    # del sourcePath since it is not relevant
    deep_del(diff, ['bundles'], 'sourcePath', lambda d: 'sourcePath' in d)
    # del lines that add vars on purpose when generating cfengine from rudder-lang
    delete_vars_insertions = lambda d: del_from_array(d['$insert'], [], 'promiser', ['args', 'report_param', 'full_class_prefix', 'class_prefix'])
    deep_del(diff, promises_path, '$insert', delete_vars_insertions)
    # del superfluous if->true equivalent condition
    is_if_any = lambda d: d['lval'] == 'if' and d['rval']['arguments'][0]['value'] == 'any'
    deep_del(diff, promises_path + ['attributes', '$delete'], '$delete', is_if_any)
    # del priority and 'any.' starting conditions
    deep_del(diff, promises_path + ['attributes', 'rval', 'arguments'], 'value', lambda d: filter_class_context(d['value']))
    # del lines that add log_rudder and _classes_noop
    del_method_insertions = lambda d: del_from_array(d['$insert'], ['attributes', 'rval'], 'name', ['log_rudder', '_classes_noop'])
    deep_del(diff, promises_path, '$insert', del_method_insertions)
  # except Exception as e:
  #   print_json("compare_cf", file_name, 'An error occurred while cleaning cf diffs: {}'.format(str(e)), True)
  #   exit(1)

def del_from_array(obj, deep_list, needle, values, deletion_offset=0):
  for index, elem in enumerate(obj.copy()):
    if get_if_contains(elem, deep_list, needle, values):
      obj.pop(index - deletion_offset)
      deletion_offset += 1
  if len(obj) == 0:
    return True
  return False

# always wrap deletion conditions in a try-exception in case obj format is not what expected
def try_del_condition(f, obj):
  try:
    return f(obj)
  except:
    return False
# Deletes haystack content from delfrom key, if needle (and values) match deep_list keys
# IMPORTANT when delfrom is an array:
  # 1. check from del_condition whether the whole object can be deleted (there could be unexpected values in it)
  # 2. delete each inner element in del_condition - so that if the array is not deleted, expected values will
  # del_from_array function solves this issue
# this
# USAGE
  # deep_del({bundle: { name: 'test' }, ['bundle'], 'bundle', lambda d: d['name'] == 'test')
  # will match name = 'test' in bundle, and delete parent entries up to 'bundle'
  # OTOH deep_del({not_bundle: { name: 'test' }, ['bundle'], 'bundle', lambda d: d['name'] == 'test')
  # will not match list path and will not delete anything
# EXAMPLE + note:
  # note that the following example works fine even with the missing path, but there is a lot more chances we match another '$insert'
  # deep_del(diff, ['$insert'], '$insert', delete_purposeful_insertions)
  # deep_del(diff, ['bundles', 'promiseTypes', 'contexts', 'promises', '$insert'], '$insert', delete_purposeful_insertions)
# ARGUMENTS
  # haystack: object to look into
  # deep_list (array of string): ordered list of keys to search from
  # delfrom: delfrom any self/parent of the matched needle (if matched)
  # del_condition (function): check if elem matches deletion condition
  # index is an internal counter
def deep_del(haystack, deep_list, delfrom, del_condition, index=0):
  istodel = False
  # 1: get in dict, if content matches searched keys
  if type(haystack) is dict:
    if len(deep_list) == index and try_del_condition(del_condition, haystack):
      istodel = True
    elif index < len(deep_list) and deep_list[index] in haystack:
      istodel |= deep_del(haystack[deep_list[index]], deep_list, delfrom, del_condition, index + 1)
    # else go deeper to find next deep_list element / needle
    else:
      for _, value in haystack.items():
        istodel |= deep_del(value, deep_list, delfrom, del_condition, index)
    if istodel and delfrom in haystack:
      haystack.pop(delfrom)
      return False
  # 2: get inner content until dict
  elif type(haystack) is list or type(haystack) is tuple:
    for elem in haystack:
      istodel |= deep_del(elem, deep_list, delfrom, del_condition, index)
  return istodel

# Currently not used, but could be useful
# checks if a key values pair exists in a given path (and returns the value found)
# optionnaly takes an array of expected values, if no values given: returns first match
# USAGE
  # see deep del, similar behavior but returns the matched value rather than deleting a part of the dict
# ARGUMENTS
  # haystack: object to look into 
  # deep_list (array of string): ordered list of keys to search from
  # needle (string): the final key to look for withing deep_list matched object
  # values (optional, array of string): match if needle value is contained in this array
  # index is an internal counter
def get_if_contains(haystack, deep_list, needle, values=None, index=0):
  if type(haystack) is dict:
    # if len not eq -> match path is wrong
    if len(deep_list) == index and needle in haystack and (values is None or haystack[needle] in values):
      return haystack[needle]
    elif index < len(deep_list) and deep_list[index] in haystack:
      return get_if_contains(haystack[deep_list[index]], deep_list, needle, values, index + 1)
    # this part is important: out of index but allows to iterate on last elements which should include needle
    for _, value in haystack.items():
      ret = get_if_contains(value, deep_list, needle, values, index)
      if ret is not None:
        return ret # else keep iterating
  elif type(haystack) is list or type(haystack) is tuple:
    for elem in haystack:
      ret = get_if_contains(elem, deep_list, needle, values, index)
      if ret is not None:
        return ret # else keep iterating
  return None

def load_config():
  cfg = configparser.ConfigParser()
  cfgpath='/opt/rudder/etc/rudderc.conf'
  if os.path.exists(cfgpath):
    cfg.read(cfgpath)
    python_modules_dir = cfg['testing_loop']['py_modules'].strip('\"')
    sys.path.append(python_modules_dir)
  return cfg

if __name__ == "__main__":
  try:
    cfg = load_config()
    import docopt
    import jsondiff
    arguments = docopt.docopt(__doc__)
    if arguments['--config-file']:
      cfg.read(arguments['--config-file'])
    ncf_tools = cfg['testing_loop']['ncf_tools'].strip('\"')
    cfengine_path = cfg['testing_loop']['cfengine'].strip('\"')
  except Exception as e:
    print_json('(Not defined yet)', '(Not defined yet)', 'An error occurred while setting config up: {}'.format(str(e)), True)
    exit(1)

  try:
    sys.path.append(ncf_tools)
    import ncf
    ncf.CFENGINE_PATH=cfengine_path
  except Exception as e:
    print_json('(Not defined yet)', '(Not defined yet)', 'An error occurred while importing ncf: {}'.format(str(e)), True)
    exit(1)
  
  if arguments['compare-json']:
    compare_json(arguments['<first.json>'], arguments['<new.json>'])
  elif arguments['compare-cf']:
    compare_cf(arguments['<first.cf>'], arguments['<new.cf>'])
  elif arguments['compare-dsc']:
    compare_cf(arguments['<first.dsc>'], arguments['<new.dsc>'])

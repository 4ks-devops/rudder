# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2020 Normation SAS

include ../rust.makefile

DOC_EXAMPLES := $(wildcard docs/examples/*.rl)

dependencies:
	$(PKG_INSTALLER) perl python3

install: build
	mkdir -p $(DESTDIR)/opt/rudder/etc
	mkdir -p $(DESTDIR)/opt/rudder/bin
	mkdir -p $(DESTDIR)/opt/rudder/share/python
	mkdir -p $(DESTDIR)/opt/rudder/share/rudder-lang/lib
	mkdir -p $(DESTDIR)/opt/rudder/share/rudder-lang/tools
	mkdir -p $(DESTDIR)/var/log/rudder/rudder-lang/

	# Install executable and helper scripts
	install -m 755 target/release/rudderc $(DESTDIR)/opt/rudder/bin/rudderc
	install -m 755 tools/tester.sh $(DESTDIR)/opt/rudder/share/rudder-lang/tools/tester.sh
	install -m 755 tools/cfjson_tester $(DESTDIR)/opt/rudder/share/rudder-lang/tools/cfjson_tester
	install -m 755 tools/generate_lib $(DESTDIR)/opt/rudder/share/rudder-lang/tools/generate_lib
	
	# Copy configuration and library files
	# required for rudderc execution
	install -m 640 tools/rudderc-prod.conf $(DESTDIR)/opt/rudder/etc/rudderc.conf
	install -m 644 libs/corelib.rl $(DESTDIR)/opt/rudder/share/rudder-lang/lib/corelib.rl
	install -m 644 libs/oslib.rl $(DESTDIR)/opt/rudder/share/rudder-lang/lib/oslib.rl
	install -m 644 libs/cfengine_core.rl $(DESTDIR)/opt/rudder/share/rudder-lang/lib/cfengine_core.rl
	# stdlib is generated by generate_lib along with every build so no need to manually cp it

	# Python libs
	cp -r tools/jsondiff $(DESTDIR)/opt/rudder/share/python/
	chmod 755 $(DESTDIR)/opt/rudder/share/python/jsondiff
	chmod 644 $(DESTDIR)/opt/rudder/share/python/jsondiff/*
	chmod 644 $(DESTDIR)/opt/rudder/etc/rudderc.conf
	chmod 644 $(DESTDIR)/var/log/rudder/rudder-lang

test-docs: $(DOC_EXAMPLES)

test: libs
	# fires rudderc unit / integration tests
	cargo test
	# fires a technique compilation using explicit parameters: path                format verbosity json-output
	cargo run -- -c tools/rudderc-dev.conf -s tests/techniques/simplest/technique.rl -f cf -l debug -j 
	# fires a technique compilation using configuration file
	cargo run -- -c tools/rudderc-dev.conf -n simplest/technique.rl
	# fires a technique translation
	cargo run -- -t -c tools/rudderc-dev.conf -s tests/helpers/6.1.2.json 
	# fires a testing loop (--keep can be added)
	tools/tester.sh --dev --keep ./tests/techniques/simplest/technique.cf


$(DOC_EXAMPLES):
	cargo run -- --config-file tools/rudderc-dev.conf --source $@ --dest $@ --format cf
	rm $@.cf

libs:
	mkdir -p repos
	[ -d repos/ncf ] || git clone git@github.com:Normation/ncf.git repos/ncf
	cd repos/ncf && git pull
	[ -d repos/dsc ] || git clone git@github.com:Normation/rudder-agent-windows.git repos/dsc \
	 || mkdir -p repos/dsc/plugin/ncf/30_generic_methods/ repos/dsc/packaging/Files/share/initial-policy/ncf/30_generic_methods/
	cd repos/dsc && git pull || true
	tools/generate_lib tools/rudderc-dev.conf

libs-docs: libs
	mkdir -p target/docs/std
	# FIXME replace with proper option
	cargo run -- -l info -c tools/rudderc-dev.conf -n simplest/technique.rl -f md
	echo "" > target/docs/std/lib.adoc
	for resource in $$(ls -1 target/docs/std/*.md); \
	  do pandoc -t asciidoc -f commonmark $${resource} >> target/docs/std/lib.adoc; \
	  echo "" >> target/docs/std/lib.adoc ;\
	done

docs: libs-docs
	mkdir -p target/docs
	cp -r docs/images target/docs/
	asciidoctor --destination-dir=target/docs docs/index.adoc
	asciidoctor --destination-dir=target/docs docs/contributing.adoc

.PHONY: docs $(DOC_EXAMPLES) libs

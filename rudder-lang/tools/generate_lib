#!/usr/bin/perl

use warnings;
use strict;

sub get_paths_from_conf_file {
  my ($file) = @_;

  my $is_default = 0;
  my $ncf_gm_path = "/usr/share/ncf/tree/30_generic_methods/";
  my $dsc_gm_path = "/var/rudder/configuration-repository/dsc/ncf/30_generic_methods/";
  my $resourcelib_path = "/opt/rudder/share/rudder-lang/lib";
  open (FILE, $file);
  while (<FILE>) {
    chomp;
    if ($is_default == 1 && /^\s*ncf_generic_methods\s*=\s*"(?<path>[\-\w\/.]+)"/ ) {
      $ncf_gm_path = $+{path};
    }
    if ($is_default == 1 && /^\s*dsc_generic_methods\s*=\s*"(?<path>[\-\w\/.]+)"/ ) {
      $dsc_gm_path = $+{path};
    }
    if ($is_default == 1 && /^\s*stdlib\s*=\s*"(?<path>[\-\w\/.]+)"/ ) {
      $resourcelib_path = $+{path};
    }
    if ( /^\s*\[\s*(?<group>\w+)\s*\]\s*$/ ) {
      if ($+{group} eq "shared") {
        $is_default = 1;
      } else {
        $is_default = 0;
      }
    }
  }
  close (FILE);
  return ($ncf_gm_path, $dsc_gm_path, $resourcelib_path);
}

my %resource = ();
my @state = ();

my $cfgpath = "/opt/rudder/etc/rudderc.conf";
if (@ARGV) {
  ($cfgpath) = @ARGV;
}
my ($ncf_gm_path, $dsc_gm_path, $resourcelib_path) = get_paths_from_conf_file $cfgpath;

# ultralight homemade parser NCF generic methods
my $ncf_methods = $ncf_gm_path . "/*";
my $is_ncf_empty=1;
foreach my $file (glob $ncf_methods) {
  $is_ncf_empty=0;
  # file exclusion
  next if $file=~ /\/_/;
  next if $file=~ /README/;
  next if $file=~ /permissions.cf/;

  open(my $fd, "<$file") or die "cannot read $file";

  my $resource_blocks=1;
  my $resource_identifiers=1;
  if ($file =~ /\/http_request_/) { $resource_identifiers=2; }
  if ($file =~ /\/sharedfile_/) { $resource_identifiers=2; }
  if ($file =~ /\/variable_/) { $resource_identifiers=2; }
  # exception's exception: only one parameter for these resources, TODO hack for translate
  if ($file =~ /\/variable_string_escaped/) { next; }

  # init data
  my $i=0;
  my ($resource, $state, $prefix, $class_parameter_name, $class_parameter_index) = ("", "", "", -1);
  my $generic_method = "";
  my @params;
  my @supported_formats = ();
  my @resource_params_unnamed=();
  my @resource_params=();
  my %param_id=();

  # loop over GM
  while(my $line=<$fd>)
  {
    if ($line =~ /^#.*\@parameter\s+(\w+)\s.*$/) {
      $param_id{$1}=$i;
      if ($i < $resource_identifiers) {
        push @resource_params_unnamed, "p$i";
      }
      push @params, "$1";
      $i++;
    }
    elsif($line =~ /^#.*\@class_prefix\s+(\w+)/) {
      $prefix = $1;
    }
    elsif($line =~ /^#.*\@class_parameter\s+(\w+)/) {
      $class_parameter_index = $param_id{$1};
      $class_parameter_name = $1;
      splice @params, $class_parameter_index, 1;
    }
    elsif($line =~ /^bundle agent (\w+)\(/) {
      $generic_method = $1;
      # exception for kernel that should be kernel_module (took from state)
      my $res_type = "[a-zA-Z0-9]+";
      if ($1 =~ /kernel_module/) {
        $res_type = "kernel_module";
      }
      # exception for http resource that should be http_request (took from state)
      elsif ($1 =~ /http_request/) {
        $res_type = "http_request";
      }
      $generic_method =~ /^((?:$res_type\_){$resource_blocks})(\w+)$/;
      ($resource, $state) = ($1, $2);
      chop $resource;
    }
  }
  push @supported_formats, "\"cf\"";
  my $dsc_gm_path = $file;

  $dsc_gm_path =~ s/^$ncf_gm_path\/tree(.*)\.cf$/$dsc_gm_path$1\.ps1/;
  if (-e $dsc_gm_path) {
    push @supported_formats, "\"dsc\"";
  }

  $resource{"resource $resource(".join(", ", @resource_params_unnamed).")"}=1;
  # keep output
  push @state, "\@class_parameter_index = $class_parameter_index";
  push @state, "\@class_parameter_name = \"$class_parameter_name\"";
  push @state, "\@class_prefix = \"$prefix\"";
  push @state, "\@supported_formats = [".join(", ", @supported_formats)."]";
  push @state, "$resource state $state(".join(", ", @params).") {}\n";
}

if ($is_ncf_empty) {
  print "no ncf method found for $ncf_methods";
}

open(my $resourcelib, '>', "$resourcelib_path/resourcelib.rl") or die "Cannot write resourcelib ($resourcelib_path/resourcelib.rl)";
print $resourcelib "\@format=0";
print $resourcelib "\n\n";
print $resourcelib join("\n",keys %resource);
print $resourcelib "\n\n";
print $resourcelib join("\n", @state);
print $resourcelib "\n\n";
close($resourcelib);

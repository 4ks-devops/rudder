# generated by rudderc
# @name condition andor
# @version 1.0

bundle agent condition_andor_technique {

  vars:
    "resources_dir"        string => "${this.promise_dirname}/resources";
    "args"                  slist => {};
    "report_param"         string => join("_", args);
    "full_class_prefix"    string => canonify("condition_andor_technique_${report_param}");
    "class_prefix"         string => string_head("${full_class_prefix}", "1000");

  methods:
    # Kernel module loaded:
    # 
    #   kernel_module("test").loaded() as kernel_module_loaded_test
    # 
    "${report_data.directive_id}_0"   usebundle => _method_reporting_context("Kernel module loaded", "test"),
                                             if => concat("debian|linux|ubuntu.windows|linux.ubuntu");
    "${report_data.directive_id}_0"   usebundle => kernel_module_loaded("test"),
                                             if => concat("debian|linux|ubuntu.windows|linux.ubuntu");
    "${report_data.directive_id}_0"   usebundle => _classes_noop(canonify("${class_prefix}_kernel_module_loaded_test")),
                                         unless => concat("debian|linux|ubuntu.windows|linux.ubuntu");
    "${report_data.directive_id}_0"   usebundle => log_rudder("Skipping method 'Kernel module loaded' with key parameter 'test' since condition 'debian|linux|ubuntu.windows|linux.ubuntu' is not reached", "test", canonify("${class_prefix}_kernel_module_loaded_test"), canonify("${class_prefix}_kernel_module_loaded_test"), @{args}),
                                         unless => concat("debian|linux|ubuntu.windows|linux.ubuntu");

}